<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
##优化时机

一般单表超过500万左右，或明显感觉到性能下降时，需要优化

##优化方案

1. 读写分离
2. 使用缓存，如memcached或Redis
3. 使用搜索引擎，如ElasticSearch或solr
4. 分库分表

##详细说明
1. 读写分离很容易实现，建议在一开始做，不必等到性能下降时
2. 发现性能下降时可做。比如有一张500万大表，不可能缓存全表，只能缓存热点数据，所以需要有一个监控热点数据的功能
3. 像缓存整个大表或者数据量很大可以用搜索引擎，搜索引擎是文件存储，适合高效查找，但不对插入修改、事务等支持。使用搜索引擎的话需要定时把mysql的数据同步给它，同样的数据需要预留2倍磁盘，虽然搜索引擎可能可以压缩
4. 分库分表其实可以在第二步做，但实现较复杂；分表后必然涉及要读取多个表的问题，但对开发是透明的，在应用开发与数据库中间需要研发一个平台，自动hash索引到分表后的表。举个例子，假设有一张600万的表，可以分为两张表，按时间分，时间点A以前的分一张，500万；另一张表100万，后续的都插入到该表
现状：数据库现在用5.5版本，免费的，不购买服务，使用了上面的2和3，暂时没遇到什么难题。不需要dba，一般难题研发可以搞定。

以上方案针对的是最大表是1000万数据量的表。超过1000万未经实践。（感谢老郭提供技术支持）

http://ouyida3.github.io/
2015.4.8
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<h2 id="">优化时机</h2>

<p>一般单表超过500万左右，或明显感觉到性能下降时，需要优化</p>

<h2 id="">优化方案</h2>

<ol>
<li>读写分离</li>
<li>使用缓存，如memcached或Redis</li>
<li>使用搜索引擎，如ElasticSearch或solr</li>
<li>分库分表</li>
</ol>

<h2 id="">详细说明</h2>

<ol>
<li>读写分离很容易实现，建议在一开始做，不必等到性能下降时</li>
<li>发现性能下降时可做。比如有一张500万大表，不可能缓存全表，只能缓存热点数据，所以需要有一个监控热点数据的功能</li>
<li>像缓存整个大表或者数据量很大可以用搜索引擎，搜索引擎是文件存储，适合高效查找，但不对插入修改、事务等支持。使用搜索引擎的话需要定时把mysql的数据同步给它，同样的数据需要预留2倍磁盘，虽然搜索引擎可能可以压缩</li>
<li>分库分表其实可以在第二步做，但实现较复杂；分表后必然涉及要读取多个表的问题，但对开发是透明的，在应用开发与数据库中间需要研发一个平台，自动hash索引到分表后的表。举个例子，假设有一张600万的表，可以分为两张表，按时间分，时间点A以前的分一张，500万；另一张表100万，后续的都插入到该表
现状：数据库现在用5.5版本，免费的，不购买服务，使用了上面的2和3，暂时没遇到什么难题。不需要dba，一般难题研发可以搞定。</li>
</ol>

<p>以上方案针对的是最大表是1000万数据量的表。超过1000万未经实践。（感谢老郭提供技术支持）</p>

<p>http://ouyida3.github.io/
2015.4.8</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "mysql-solution";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
</body>
</html>
